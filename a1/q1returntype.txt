B i.

BENCHMARK (without compiler optimization):

$program 100000000 10000 1003

./exception             ./returntype             ./returntypec            ./returnglobal
---------------------------------------------------------------------------------------------
3.45u 0.00s 0:03.46   	24.76u 0.12s 0:24.89    	3.70u 0.00s 0:03.71	    3.44u 0.00s 0:03.44
3.41u 0.00s 0:03.41   	24.22u 0.00s 0:24.23    	3.72u 0.00s 0:03.72	    3.41u 0.00s 0:03.41
3.38u 0.00s 0:03.38   	24.38u 0.00s 0:24.39    	3.72u 0.00s 0:03.72	    3.42u 0.00s 0:03.42
3.49u 0.00s 0:03.49   	24.14u 0.00s 0:24.14    	3.70u 0.00s 0:03.71	    3.45u 0.00s 0:03.45
3.45u 0.00s 0:03.45   	24.34u 0.00s 0:24.35    	3.74u 0.00s 0:03.74	    3.37u 0.00s 0:03.37
3.41u 0.00s 0:03.41   	24.17u 0.01s 0:24.19    	3.72u 0.00s 0:03.72	    3.43u 0.00s 0:03.43
3.50u 0.00s 0:03.50   	24.09u 0.02s 0:24.12    	4.01u 0.00s 0:04.01	    3.40u 0.00s 0:03.40
3.37u 0.00s 0:03.37   	24.05u 0.00s 0:24.05    	3.72u 0.00s 0:03.72	    3.42u 0.00s 0:03.42

BENCHMARK (optimized):
./exception             ./returntype             ./returntypec            ./returnglobal
---------------------------------------------------------------------------------------------
2.69u 0.00s 0:02.69    	4.02u 0.00s 0:04.04   	3.55u 0.00s 0:03.57     	2.84u 0.00s 0:02.85
2.69u 0.00s 0:02.69    	4.04u 0.00s 0:04.04   	3.51u 0.00s 0:03.51     	2.77u 0.00s 0:02.77
2.63u 0.00s 0:02.63    	3.98u 0.00s 0:03.98   	3.50u 0.00s 0:03.50     	2.79u 0.00s 0:02.79
2.86u 0.00s 0:02.86    	4.04u 0.00s 0:04.04   	3.50u 0.00s 0:03.50     	2.72u 0.00s 0:02.72
2.75u 0.00s 0:02.75    	4.00u 0.00s 0:04.00   	3.50u 0.00s 0:03.50     	2.67u 0.00s 0:02.67
2.73u 0.00s 0:02.74    	3.99u 0.00s 0:03.99   	3.70u 0.00s 0:03.70     	2.68u 0.00s 0:02.68
2.65u 0.00s 0:02.65    	4.00u 0.00s 0:04.00   	3.68u 0.00s 0:03.68     	2.67u 0.00s 0:02.67
2.68u 0.00s 0:02.68    	3.98u 0.00s 0:03.98   	3.61u 0.00s 0:03.61     	2.72u 0.00s 0:02.72

B ii.
returnglobal:
There is a neglible performance difference in between transformed and original. This becaause
out of the all the transformed programs returnglobal has the least overhead; furthermore Since
errors are rarely raised with eperiod=10000 the performance of exception isn't too negatively
impacted by searching for the correct handlers either;

returntype:
There is an extreme performance decrease using returntype from the original program.
This is because returntype uses the template library variant. 
Templates involves many calls to trivial functions (extra overhead) that slow down the overall performance.
On average the transformed program takes around 8 times as long as the original.

returntypec:
There is a slight performance decrease using returntypec from the original program.
This is caused by the fact that tagged union is a larger object than Ex1, Ex2, Ex3 and thus takes longer to construct;
This issue is further compounded by the fact the returntypec returns a tagged union object even when no exception has occured
adding even more overhead in reading and writing the attributes of tagged union.
On average the transformed program takes 110% of runtime the original.

B iii.
returntype: On average the transformed program is around 1.30-1.40 seconds slower than the original. (~150%)
returntypec: On average the transformed program is around 0.90-1.0 seconds slower than the original. (~30%)
returnglobal: On average the transformed takes around 0.10 seconds longer than the original. (~5%)

C i.
BENCHMARKS:

input 100000000 1000 10003

./exception             ./returntype             ./returntypec            ./returnglobal
---------------------------------------------------------------------------------------------
2.98u 0.00s 0:02.99   	4.07u 0.00s 0:04.08     	2.98u 0.00s 0:02.98   	2.80u 0.00s 0:02.80
2.96u 0.00s 0:02.96   	4.04u 0.00s 0:04.04     	2.93u 0.00s 0:02.94   	2.78u 0.00s 0:02.79
2.95u 0.00s 0:02.95   	4.00u 0.00s 0:04.00     	2.93u 0.00s 0:02.93   	2.85u 0.00s 0:02.85
2.94u 0.00s 0:02.94   	4.01u 0.00s 0:04.01     	2.95u 0.00s 0:02.95   	2.69u 0.00s 0:02.70
2.95u 0.00s 0:02.95   	4.02u 0.00s 0:04.02     	2.92u 0.00s 0:02.92   	2.69u 0.00s 0:02.69
2.96u 0.00s 0:02.96   	4.01u 0.00s 0:04.01     	2.93u 0.00s 0:02.93   	2.79u 0.00s 0:02.79
2.96u 0.00s 0:02.96   	4.00u 0.00s 0:04.00     	2.93u 0.00s 0:02.93   	2.78u 0.00s 0:02.78
2.99u 0.00s 0:02.99   	4.01u 0.00s 0:04.01     	2.93u 0.00s 0:02.93   	2.74u 0.00s 0:02.75
3.00u 0.00s 0:03.00   	4.06u 0.00s 0:04.06     	2.97u 0.00s 0:02.97   	2.72u 0.00s 0:02.73
2.97u 0.00s 0:02.97   	4.10u 0.00s 0:04.10     	2.95u 0.00s 0:02.95   	2.68u 0.00s 0:02.68
3.05u 0.00s 0:03.05   	4.05u 0.00s 0:04.05     	3.04u 0.01s 0:03.05   	2.77u 0.02s 0:02.80
3.08u 0.00s 0:03.08   	4.03u 0.00s 0:04.03     	3.00u 0.00s 0:03.01   	2.82u 0.00s 0:02.82

input: 100000000 100 1003

./exception             ./returntype             ./returntypec            ./returnglobal
---------------------------------------------------------------------------------------------
8.02u 0.00s 0:08.03	    4.23u 0.00s 0:04.25    	2.91u 0.00s 0:02.91     	2.86u 0.00s 0:02.86
7.46u 0.00s 0:07.46	    4.21u 0.00s 0:04.21    	2.86u 0.00s 0:02.86     	2.96u 0.00s 0:02.96
7.53u 0.02s 0:07.55	    4.26u 0.00s 0:04.26    	2.92u 0.00s 0:02.92     	2.80u 0.00s 0:02.80
7.53u 0.00s 0:07.53	    4.22u 0.00s 0:04.22    	2.89u 0.00s 0:02.89     	2.74u 0.00s 0:02.74
7.41u 0.01s 0:07.43	    4.21u 0.00s 0:04.22    	2.88u 0.00s 0:02.88     	2.80u 0.00s 0:02.80
7.36u 0.02s 0:07.38	    4.23u 0.00s 0:04.24    	2.89u 0.00s 0:02.90     	2.78u 0.00s 0:02.78
7.51u 0.08s 0:07.60	    4.28u 0.00s 0:04.29    	2.89u 0.00s 0:02.89     	2.93u 0.00s 0:02.93
7.57u 0.00s 0:07.58	    4.28u 0.00s 0:04.29    	2.87u 0.00s 0:02.87     	2.88u 0.00s 0:02.88
7.56u 0.01s 0:07.57	    4.23u 0.00s 0:04.23    	2.88u 0.00s 0:02.88     	2.88u 0.00s 0:02.88
7.34u 0.00s 0:07.34	    4.20u 0.00s 0:04.62    	2.84u 0.00s 0:02.84     	2.87u 0.00s 0:02.87
7.34u 0.00s 0:07.34	    4.20u 0.00s 0:04.21    	2.91u 0.00s 0:02.92     	2.83u 0.00s 0:02.83
7.38u 0.00s 0:07.39	    4.20u 0.00s 0:04.20    	2.92u 0.00s 0:02.93     	2.86u 0.00s 0:02.86

input: 100000000 50 1003
./exception             ./returntype             ./returntypec            ./returnglobal
---------------------------------------------------------------------------------------------
11.91u 0.00s 0:11.94  	4.32u 0.01s 0:04.34    	3.04u 0.00s 0:03.04     	2.86u 0.00s 0:02.86
11.82u 0.00s 0:11.82  	4.22u 0.00s 0:04.23    	2.94u 0.00s 0:02.94     	2.95u 0.00s 0:02.95
11.66u 0.00s 0:11.66  	4.31u 0.00s 0:04.31    	2.99u 0.00s 0:02.99     	2.90u 0.00s 0:02.91
11.35u 0.00s 0:11.36  	4.30u 0.00s 0:04.30    	3.03u 0.00s 0:03.03     	2.82u 0.00s 0:02.82
11.80u 0.00s 0:11.80  	4.34u 0.00s 0:04.34    	2.92u 0.00s 0:02.92     	2.87u 0.01s 0:02.91
12.09u 0.00s 0:12.09  	4.24u 0.00s 0:04.24    	2.92u 0.00s 0:02.92     	3.04u 0.05s 0:03.10
11.88u 0.00s 0:11.89  	4.28u 0.01s 0:04.30    	2.90u 0.00s 0:02.90     	2.93u 0.00s 0:02.93
11.88u 0.00s 0:11.89  	4.37u 0.00s 0:04.37    	2.86u 0.00s 0:02.86     	2.91u 0.00s 0:02.91
11.79u 0.00s 0:11.80  	4.21u 0.00s 0:04.21    	2.93u 0.00s 0:02.93     	2.82u 0.00s 0:02.82
11.71u 0.00s 0:11.72  	4.21u 0.00s 0:04.21    	2.89u 0.00s 0:02.89     	2.85u 0.00s 0:02.86
12.13u 0.00s 0:12.30  	4.19u 0.00s 0:04.19    	2.91u 0.00s 0:02.91     	2.87u 0.00s 0:02.87
11.75u 0.00s 0:11.75  	4.15u 0.00s 0:04.15    	2.90u 0.00s 0:02.90     	2.82u 0.00s 0:02.82


ii.
For eperiod = 1000 exepction is:
slightly slower than returnglobal (~10%)
significantly faster than returntype (returntype is ~125% of exception runtime).
same speed as returntypec

For eperiod = 100, exception takes:
~180% the runtime of returntype
~250% the runtime of returntypec and returnglobal
(note in these benchemarks returnglobal is slightly faster than returntypec by a few centiseconds)

For eperiod = 50, exception takes:
~280% the runtime of returntype
~400% the runtime returntypec and returnglobal
(note in these benchmarks returnglobal is slightly faster than returntypec by a few centiseconds)

The reason for the above results is due to that as eperiod gets smaller more exceptions are throw.
Since throw/catch needs to unwind and search down the stack for the correct handler for each raised error
it adds an O(n) operation for each error raised (n being the height of stack). The transformed programs
are low level and does not perform those operation thus saving much overhead as more exception are raised
(improving performance relative to exception)
